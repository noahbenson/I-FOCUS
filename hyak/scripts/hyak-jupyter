#! /bin/bash

# The one variable we set manually.
BINDIR="${HOME}/.hyak-jupyter/bin"

# If Jupyter is already running, just error our right away
"${BINDIR}"/jupyter-query.sh "$@" && {
    echo "Jupyter is already running:"
    jupyter-query.sh print
    exit 1
}

# Utility stuff.
function die {
    echo "ERROR:" "$@" 1>&2
    exit 1
}

# Next, configuration--this gets pulled out of either environment
# variables are command-line arguments by the args script:
eval "$(${BINDIR}/hyak-jupyter-args.sh "$@")"

# Make sure we can create a tunnel directory.
mkdir -p "${TUNNEL_DIR}" \
    || die "Could not make tunnel directory: ${TUNNEL_DIR}"

# If a previous run's scripts and such are still present, clear them out.
[ -e "${SOCKET_FILE}" ] && rm "${SOCKET_FILE}"
[ -e "${LOGIN_FILE}" ]  && rm "${LOGIN_FILE}"
[ -e "${JOB_FILE}" ]    && rm "${JOB_FILE}"
[ -e "${RUN_SCRIPT}" ]  && rm "${RUN_SCRIPT}"

# At this point, if we are not in a screen, put us in one.
if [ -z "$STY" ]
then exec screen /bin/bash "$0" "$@"
else screen caption always \
         "%{= RW}To detach, press control + a then d. To reattach: screen -x"
     screen screen jupyter-tunnel.sh
fi

# Everything checks out; we can export our environment and run it now.
echo "Starting Jupyter using ${SOCKET_NAME} socket."

echo "Queuing job: ${JUPYTER_START_CMD}"
export JOBOUT="${TUNNEL_DIR}/startup.out"
export JOBERR="${TUNNEL_DIR}/startup.err"
srun "${OTHER_ARGS[@]}" --pty /bin/bash "${JUPYTER_START_CMD}" "${SOCKET_NAME}"
echo "Jupyter exited with status $?."

# Cleanup:
[ -e "${SOCKET_FILE}" ] && rm "${SOCKET_FILE}"

read -n1 -p "Press enter to exit." KEYPRESS
