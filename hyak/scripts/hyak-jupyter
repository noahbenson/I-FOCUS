#! /bin/bash
################################################################################
# Starts up a Jupyter instance on a Hyak node and sets up forwarding for it.
# The Jupyter instance is run using an apptainer image, which may be specified
# via options, and the command is run inside of a screen instance with the name
# "jupyter" for convenience.


# Utilities ####################################################################

# A function to print an error then exit with an error code.
function die {
    echo "ERROR:" "$@" 1>&2
    exit 1
}


# Configuration ################################################################

# The directory containing our local I-FOCUS data. This should not be changed
# unless you have multiple installations of the I-FOCUS tools.
IFOCUS_PATH="${IFOCUS_PATH:-${HOME}/.i-focus}"
# The scripts in the IFOCUS_BIN_PATH are essentially "private" to the I-FOCUS
# programs and aren't intended to be called directly by the user.
IFOCUS_BIN_PATH="${IFOCUS_BIN_PATH:-${IFOCUS_PATH}/bin}"
# It's easiest to just put the IFOCUS_BIN_PATH on the PATH. POSIX requires that
# the PATH is searched left-to-right, so putting IFOCUS_BIN_PATH firsts ensures
# that our scripts are always called (and not some other scripts on the PATH
# that accidentally have the same name).
PATH="${IFOCUS_BIN_PATH}:${PATH}"

# The rest of the configuration can be loaded using the ifocus-init.sh script
# and the jupyter-init.sh script, both in the IFOCUS_BIN_PATH.
# The jupyter-init.sh script runs the ifocus-init.sh script and exports all of
# its variables, so only the latter is required.
eval "$(jupyter-init.sh "$@")"


# Sanity Checking ##############################################################

# If Jupyter is already running, just error out right away.
query=$(jupyter-query.sh "$@") && {
    eval "${query}"
    echo "Jupyter is already running with SLURM job id ${SLURM_JOB_ID}"
    echo "on screen ${IFOCUS_SCREEN}."
    echo "If you wish to reattach that screen, then select n (do not kill"
    echo "this job) then use the command: screen -x ${IFOCUS_SCREEN@Q}"
    echo ""
    read -p "Kill this job and restart Jupyter (y/[n])? " RESTART_SCREEN
    if   [ "${RESTART_SCREEN}" != "y" ] && [ "${RESTART_SCREEN}" != "Y" ]
    then exit 1
    fi
    scancel "${SLURM_JOB_ID}"
    screen -S "${IFOCUS_SCREEN}" -X quit &>/dev/null
    ii=0
    while ifocus_isrunning && [ $ii -lt 5 ]
    do sleep 2; ii=$(( $ii + 1 ))
    done
    if [ -w "${IFOCUS_STATUS_FILE}" ]
    then echo "WARNING: `scancel ${SLURM_JOB_ID}` didn't clear status file:"
         echo "         ${IFOCUS_STATUS_FILE}"
         echo ""
         read -p "Manually delete status file (y/[n])? " DELETE_STATUS
         if [ "${DELETE_STATUS}" != "y" ] && [ "${DELETE_STATUS}" != "Y" ]
         then exit 1
         fi
         rm -f "${IFOCUS_STATUS_FILE}"
    fi
}

# At this point, if we are not in a screen, put us in one.
if [ -z "$STY" ]
then # Before we start the screen, make sure there isn't already one running:
     SPIDS=( $(screen -list | tr "\t" " " | grep -E '^ +[^ ]+' \
                            | sed -E "s/^ +([0-9]+)\.([^ ]+) .*$/\1/g"))
     SNAMES=($(screen -list | tr "\t" " " | grep -E '^ +[^ ]+' \
                            | sed -E "s/^ +([0-9]+)\.([^ ]+) .*$/\2/g"))
     ii=0
     while [ $ii -lt ${#SNAMES[@]} ]
     do SPID=${SPIDS[$ii]}
        SNAME=${SNAMES[$ii]}
        ii=$(( ${ii} + 1 ))
        if [ ${SNAME} = ${IFOCUS_SCREEN} ]
        then echo "A screen with the name '${SNAME}' (PID ${SPID}) is already"
             echo "running, but its ifocus-jupter process appears to be dead."
             echo ""
             read -p "Kill this screen ([y]/n)? " KILLSCREEN
             if [ "${KILLSCREEN}" = "n" ] || [ "${KILLSCREEN}" = "no" ]
             then die "Could not use screen with name '${SNAME}'"
             else screen -S "${SPID}.${SNAME}" -X quit &>/dev/null
             fi
        fi
     done
     # Once that is taken care of, start the screen process:
     exec screen -S "${IFOCUS_SCREEN}" /bin/bash "$0" "$@"
fi

# Everything checks out. At this point it's safe to claim that the hyak-jupyter
# I-FOCUS job is running.
ifocus_start

# We can export our environment and run it now.
echo "Starting Jupyter using the tag ${IFOCUS_SCREEN}..."
echo ""
echo "I-FOCUS Configuration:"
set | grep "^IFOCUS_" \
    | grep -vE '^IFOCUS_[^=]+_DEFAULT=' \
    | sed -E 's/^/   - /g'
echo ""
echo "SLURM Configuration:"
set | grep "^${IFOCUS_SLURM_PREFIX}" \
    | grep -vE '^[^=]+_DEFAULT=' \
    | grep -v '^SLURM_ARGS=' \
    | sed -E 's/^/   - /g'
echo ""
if [ -n "${SLURM_ARGS[*]}" ]
then echo "SLURM Arguments:"
     echo "   ${SLURM_ARGS[@]}"
     echo ""
fi
if [ -n "${POS_ARGS[*]}" ]
then echo "Additional Arguments:"
     echo "   ${POS_ARGS[@]}"
     echo ""
fi

# Write the Job File:
set | grep "^IFOCUS_" \
    | grep -vE '^[^=]+_DEFAULT=' \
    | sed 's/^/export /g' \
    > "${IFOCUS_JOB_FILE}"
set | grep "^${IFOCUS_SLURM_PREFIX}" \
    | grep -vE '^[^=]+_DEFAULT=' \
    | grep -v '^SLURM_ARGS=' \
    | sed 's/^/export /g' \
   >> "${IFOCUS_JOB_FILE}"
echo "export SLURM_ARGS=(${SLURM_ARGS[@]@Q})" >> "${IFOCUS_JOB_FILE}"
echo "export POS_ARGS=(${POS_ARGS[@]@Q})" >> "${IFOCUS_JOB_FILE}"
declare -f ifocus_start ifocus_isrunning >> "${IFOCUS_JOB_FILE}"

# We also want to make sure that there is no run script (it shouldn't be written
# until the node has been allocated). Same with the socket files.
[ -w "${IFOCUS_JUPYTER_RUN_SCRIPT}" ] \
    && rm -f "${IFOCUS_JUPYTER_RUN_SCRIPT}"
[ -w "${IFOCUS_JUPYTER_SOCKET_FILE}" ] \
    && rm -f "${IFOCUS_JUPYTER_SOCKET_FILE}"
[ -w "${IFOCUS_JUPYTER_LOGIN_FILE}" ] \
    && rm -f "${IFOCUS_JUPYTER_LOGIN_FILE}"

# Configure the screen that we are in.
screen -S "${IFOCUS_SCREEN}" \
       -X screen \
       "${IFOCUS_BIN_PATH}/jupyter-tunnel.sh" "${IFOCUS_JOB_FILE}"
IFOCUS_SCREEN_MSG=(
    "%{= RW}To detach, press control + a then d."
    "To reattach: screen -x ${IFOCUS_SCREEN}")
screen -S "${IFOCUS_SCREEN}" -X caption always "${IFOCUS_SCREEN_MSG[*]}"
screen -S "${IFOCUS_SCREEN}" -X prev

# Print a message about what's going on...
echo "Allocating node..."
echo "This may take a few minutes, depending on the system usage right now and"
echo "how many resources you have requested for this session."

# Allocate/run the job.
export JOBOUT="${IFOCUS_WORK_PATH}/stdout.txt"
export JOBERR="${IFOCUS_WORK_PATH}/stderr.txt"
srun --pty "${SLURM_ARGS[@]}" -- \
     /bin/bash "${IFOCUS_BIN_PATH}/jupyter-start.sh" "${IFOCUS_JOB_FILE}"
SRUN_RVAL="$?"

# Clean up and exit.
echo ""
echo "Jupyter exited with status ${SRUN_RVAL}."
[ -e "${IFOCUS_JUPYTER_SOCKET_FILE}" ] && rm "${IFOCUS_JUPYTER_SOCKET_FILE}"
echo ""
read -n1 -p "Press enter to exit." KEYPRESS
exit ${SRUN_RVAL}
